/*
Observability Service API

Observability Service to register pipelines and store observability events.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MainCreateEventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MainCreateEventRequest{}

// MainCreateEventRequest struct for MainCreateEventRequest
type MainCreateEventRequest struct {
	DataProductId *int32 `json:"dataProductId,omitempty"`
	MicroBatchId *string `json:"microBatchId,omitempty"`
	NamespaceId *int32 `json:"namespaceId,omitempty"`
	ParentPipelineID *int32 `json:"parentPipelineID,omitempty"`
	ParentPipelineWorkflowID *string `json:"parentPipelineWorkflowID,omitempty"`
	PipelineID *int32 `json:"pipelineID,omitempty"`
	SourceId *int32 `json:"sourceId,omitempty"`
	State *string `json:"state,omitempty"`
	TenantId *int32 `json:"tenantId,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	WorkflowID *string `json:"workflowID,omitempty"`
}

// NewMainCreateEventRequest instantiates a new MainCreateEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMainCreateEventRequest() *MainCreateEventRequest {
	this := MainCreateEventRequest{}
	return &this
}

// NewMainCreateEventRequestWithDefaults instantiates a new MainCreateEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMainCreateEventRequestWithDefaults() *MainCreateEventRequest {
	this := MainCreateEventRequest{}
	return &this
}

// GetDataProductId returns the DataProductId field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetDataProductId() int32 {
	if o == nil || IsNil(o.DataProductId) {
		var ret int32
		return ret
	}
	return *o.DataProductId
}

// GetDataProductIdOk returns a tuple with the DataProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetDataProductIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DataProductId) {
		return nil, false
	}
	return o.DataProductId, true
}

// HasDataProductId returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasDataProductId() bool {
	if o != nil && !IsNil(o.DataProductId) {
		return true
	}

	return false
}

// SetDataProductId gets a reference to the given int32 and assigns it to the DataProductId field.
func (o *MainCreateEventRequest) SetDataProductId(v int32) {
	o.DataProductId = &v
}

// GetMicroBatchId returns the MicroBatchId field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetMicroBatchId() string {
	if o == nil || IsNil(o.MicroBatchId) {
		var ret string
		return ret
	}
	return *o.MicroBatchId
}

// GetMicroBatchIdOk returns a tuple with the MicroBatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetMicroBatchIdOk() (*string, bool) {
	if o == nil || IsNil(o.MicroBatchId) {
		return nil, false
	}
	return o.MicroBatchId, true
}

// HasMicroBatchId returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasMicroBatchId() bool {
	if o != nil && !IsNil(o.MicroBatchId) {
		return true
	}

	return false
}

// SetMicroBatchId gets a reference to the given string and assigns it to the MicroBatchId field.
func (o *MainCreateEventRequest) SetMicroBatchId(v string) {
	o.MicroBatchId = &v
}

// GetNamespaceId returns the NamespaceId field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetNamespaceId() int32 {
	if o == nil || IsNil(o.NamespaceId) {
		var ret int32
		return ret
	}
	return *o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetNamespaceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NamespaceId) {
		return nil, false
	}
	return o.NamespaceId, true
}

// HasNamespaceId returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasNamespaceId() bool {
	if o != nil && !IsNil(o.NamespaceId) {
		return true
	}

	return false
}

// SetNamespaceId gets a reference to the given int32 and assigns it to the NamespaceId field.
func (o *MainCreateEventRequest) SetNamespaceId(v int32) {
	o.NamespaceId = &v
}

// GetParentPipelineID returns the ParentPipelineID field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetParentPipelineID() int32 {
	if o == nil || IsNil(o.ParentPipelineID) {
		var ret int32
		return ret
	}
	return *o.ParentPipelineID
}

// GetParentPipelineIDOk returns a tuple with the ParentPipelineID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetParentPipelineIDOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentPipelineID) {
		return nil, false
	}
	return o.ParentPipelineID, true
}

// HasParentPipelineID returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasParentPipelineID() bool {
	if o != nil && !IsNil(o.ParentPipelineID) {
		return true
	}

	return false
}

// SetParentPipelineID gets a reference to the given int32 and assigns it to the ParentPipelineID field.
func (o *MainCreateEventRequest) SetParentPipelineID(v int32) {
	o.ParentPipelineID = &v
}

// GetParentPipelineWorkflowID returns the ParentPipelineWorkflowID field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetParentPipelineWorkflowID() string {
	if o == nil || IsNil(o.ParentPipelineWorkflowID) {
		var ret string
		return ret
	}
	return *o.ParentPipelineWorkflowID
}

// GetParentPipelineWorkflowIDOk returns a tuple with the ParentPipelineWorkflowID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetParentPipelineWorkflowIDOk() (*string, bool) {
	if o == nil || IsNil(o.ParentPipelineWorkflowID) {
		return nil, false
	}
	return o.ParentPipelineWorkflowID, true
}

// HasParentPipelineWorkflowID returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasParentPipelineWorkflowID() bool {
	if o != nil && !IsNil(o.ParentPipelineWorkflowID) {
		return true
	}

	return false
}

// SetParentPipelineWorkflowID gets a reference to the given string and assigns it to the ParentPipelineWorkflowID field.
func (o *MainCreateEventRequest) SetParentPipelineWorkflowID(v string) {
	o.ParentPipelineWorkflowID = &v
}

// GetPipelineID returns the PipelineID field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetPipelineID() int32 {
	if o == nil || IsNil(o.PipelineID) {
		var ret int32
		return ret
	}
	return *o.PipelineID
}

// GetPipelineIDOk returns a tuple with the PipelineID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetPipelineIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PipelineID) {
		return nil, false
	}
	return o.PipelineID, true
}

// HasPipelineID returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasPipelineID() bool {
	if o != nil && !IsNil(o.PipelineID) {
		return true
	}

	return false
}

// SetPipelineID gets a reference to the given int32 and assigns it to the PipelineID field.
func (o *MainCreateEventRequest) SetPipelineID(v int32) {
	o.PipelineID = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetSourceId() int32 {
	if o == nil || IsNil(o.SourceId) {
		var ret int32
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetSourceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given int32 and assigns it to the SourceId field.
func (o *MainCreateEventRequest) SetSourceId(v int32) {
	o.SourceId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *MainCreateEventRequest) SetState(v string) {
	o.State = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetTenantId() int32 {
	if o == nil || IsNil(o.TenantId) {
		var ret int32
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetTenantIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given int32 and assigns it to the TenantId field.
func (o *MainCreateEventRequest) SetTenantId(v int32) {
	o.TenantId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *MainCreateEventRequest) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetWorkflowID returns the WorkflowID field value if set, zero value otherwise.
func (o *MainCreateEventRequest) GetWorkflowID() string {
	if o == nil || IsNil(o.WorkflowID) {
		var ret string
		return ret
	}
	return *o.WorkflowID
}

// GetWorkflowIDOk returns a tuple with the WorkflowID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainCreateEventRequest) GetWorkflowIDOk() (*string, bool) {
	if o == nil || IsNil(o.WorkflowID) {
		return nil, false
	}
	return o.WorkflowID, true
}

// HasWorkflowID returns a boolean if a field has been set.
func (o *MainCreateEventRequest) HasWorkflowID() bool {
	if o != nil && !IsNil(o.WorkflowID) {
		return true
	}

	return false
}

// SetWorkflowID gets a reference to the given string and assigns it to the WorkflowID field.
func (o *MainCreateEventRequest) SetWorkflowID(v string) {
	o.WorkflowID = &v
}

func (o MainCreateEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MainCreateEventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataProductId) {
		toSerialize["dataProductId"] = o.DataProductId
	}
	if !IsNil(o.MicroBatchId) {
		toSerialize["microBatchId"] = o.MicroBatchId
	}
	if !IsNil(o.NamespaceId) {
		toSerialize["namespaceId"] = o.NamespaceId
	}
	if !IsNil(o.ParentPipelineID) {
		toSerialize["parentPipelineID"] = o.ParentPipelineID
	}
	if !IsNil(o.ParentPipelineWorkflowID) {
		toSerialize["parentPipelineWorkflowID"] = o.ParentPipelineWorkflowID
	}
	if !IsNil(o.PipelineID) {
		toSerialize["pipelineID"] = o.PipelineID
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.WorkflowID) {
		toSerialize["workflowID"] = o.WorkflowID
	}
	return toSerialize, nil
}

type NullableMainCreateEventRequest struct {
	value *MainCreateEventRequest
	isSet bool
}

func (v NullableMainCreateEventRequest) Get() *MainCreateEventRequest {
	return v.value
}

func (v *NullableMainCreateEventRequest) Set(val *MainCreateEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMainCreateEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMainCreateEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainCreateEventRequest(val *MainCreateEventRequest) *NullableMainCreateEventRequest {
	return &NullableMainCreateEventRequest{value: val, isSet: true}
}

func (v NullableMainCreateEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainCreateEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


