/*
Observability Service API

Observability Service to register pipelines and store observability events.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MainRegisterPipelineRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MainRegisterPipelineRequest{}

// MainRegisterPipelineRequest struct for MainRegisterPipelineRequest
type MainRegisterPipelineRequest struct {
	NamespaceId int32 `json:"namespaceId"`
	ParentPipelineId *int32 `json:"parentPipelineId,omitempty"`
	ParentPipelineName *string `json:"parentPipelineName,omitempty"`
	PipelineId int32 `json:"pipelineId"`
	PipelineName string `json:"pipelineName"`
	States []string `json:"states"`
	Type string `json:"type"`
}

type _MainRegisterPipelineRequest MainRegisterPipelineRequest

// NewMainRegisterPipelineRequest instantiates a new MainRegisterPipelineRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMainRegisterPipelineRequest(namespaceId int32, pipelineId int32, pipelineName string, states []string, type_ string) *MainRegisterPipelineRequest {
	this := MainRegisterPipelineRequest{}
	this.NamespaceId = namespaceId
	this.PipelineId = pipelineId
	this.PipelineName = pipelineName
	this.States = states
	this.Type = type_
	return &this
}

// NewMainRegisterPipelineRequestWithDefaults instantiates a new MainRegisterPipelineRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMainRegisterPipelineRequestWithDefaults() *MainRegisterPipelineRequest {
	this := MainRegisterPipelineRequest{}
	return &this
}

// GetNamespaceId returns the NamespaceId field value
func (o *MainRegisterPipelineRequest) GetNamespaceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value
// and a boolean to check if the value has been set.
func (o *MainRegisterPipelineRequest) GetNamespaceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamespaceId, true
}

// SetNamespaceId sets field value
func (o *MainRegisterPipelineRequest) SetNamespaceId(v int32) {
	o.NamespaceId = v
}

// GetParentPipelineId returns the ParentPipelineId field value if set, zero value otherwise.
func (o *MainRegisterPipelineRequest) GetParentPipelineId() int32 {
	if o == nil || IsNil(o.ParentPipelineId) {
		var ret int32
		return ret
	}
	return *o.ParentPipelineId
}

// GetParentPipelineIdOk returns a tuple with the ParentPipelineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainRegisterPipelineRequest) GetParentPipelineIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentPipelineId) {
		return nil, false
	}
	return o.ParentPipelineId, true
}

// HasParentPipelineId returns a boolean if a field has been set.
func (o *MainRegisterPipelineRequest) HasParentPipelineId() bool {
	if o != nil && !IsNil(o.ParentPipelineId) {
		return true
	}

	return false
}

// SetParentPipelineId gets a reference to the given int32 and assigns it to the ParentPipelineId field.
func (o *MainRegisterPipelineRequest) SetParentPipelineId(v int32) {
	o.ParentPipelineId = &v
}

// GetParentPipelineName returns the ParentPipelineName field value if set, zero value otherwise.
func (o *MainRegisterPipelineRequest) GetParentPipelineName() string {
	if o == nil || IsNil(o.ParentPipelineName) {
		var ret string
		return ret
	}
	return *o.ParentPipelineName
}

// GetParentPipelineNameOk returns a tuple with the ParentPipelineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainRegisterPipelineRequest) GetParentPipelineNameOk() (*string, bool) {
	if o == nil || IsNil(o.ParentPipelineName) {
		return nil, false
	}
	return o.ParentPipelineName, true
}

// HasParentPipelineName returns a boolean if a field has been set.
func (o *MainRegisterPipelineRequest) HasParentPipelineName() bool {
	if o != nil && !IsNil(o.ParentPipelineName) {
		return true
	}

	return false
}

// SetParentPipelineName gets a reference to the given string and assigns it to the ParentPipelineName field.
func (o *MainRegisterPipelineRequest) SetParentPipelineName(v string) {
	o.ParentPipelineName = &v
}

// GetPipelineId returns the PipelineId field value
func (o *MainRegisterPipelineRequest) GetPipelineId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PipelineId
}

// GetPipelineIdOk returns a tuple with the PipelineId field value
// and a boolean to check if the value has been set.
func (o *MainRegisterPipelineRequest) GetPipelineIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineId, true
}

// SetPipelineId sets field value
func (o *MainRegisterPipelineRequest) SetPipelineId(v int32) {
	o.PipelineId = v
}

// GetPipelineName returns the PipelineName field value
func (o *MainRegisterPipelineRequest) GetPipelineName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineName
}

// GetPipelineNameOk returns a tuple with the PipelineName field value
// and a boolean to check if the value has been set.
func (o *MainRegisterPipelineRequest) GetPipelineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineName, true
}

// SetPipelineName sets field value
func (o *MainRegisterPipelineRequest) SetPipelineName(v string) {
	o.PipelineName = v
}

// GetStates returns the States field value
func (o *MainRegisterPipelineRequest) GetStates() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.States
}

// GetStatesOk returns a tuple with the States field value
// and a boolean to check if the value has been set.
func (o *MainRegisterPipelineRequest) GetStatesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.States, true
}

// SetStates sets field value
func (o *MainRegisterPipelineRequest) SetStates(v []string) {
	o.States = v
}

// GetType returns the Type field value
func (o *MainRegisterPipelineRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MainRegisterPipelineRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MainRegisterPipelineRequest) SetType(v string) {
	o.Type = v
}

func (o MainRegisterPipelineRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MainRegisterPipelineRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespaceId"] = o.NamespaceId
	if !IsNil(o.ParentPipelineId) {
		toSerialize["parentPipelineId"] = o.ParentPipelineId
	}
	if !IsNil(o.ParentPipelineName) {
		toSerialize["parentPipelineName"] = o.ParentPipelineName
	}
	toSerialize["pipelineId"] = o.PipelineId
	toSerialize["pipelineName"] = o.PipelineName
	toSerialize["states"] = o.States
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *MainRegisterPipelineRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespaceId",
		"pipelineId",
		"pipelineName",
		"states",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMainRegisterPipelineRequest := _MainRegisterPipelineRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMainRegisterPipelineRequest)

	if err != nil {
		return err
	}

	*o = MainRegisterPipelineRequest(varMainRegisterPipelineRequest)

	return err
}

type NullableMainRegisterPipelineRequest struct {
	value *MainRegisterPipelineRequest
	isSet bool
}

func (v NullableMainRegisterPipelineRequest) Get() *MainRegisterPipelineRequest {
	return v.value
}

func (v *NullableMainRegisterPipelineRequest) Set(val *MainRegisterPipelineRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMainRegisterPipelineRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMainRegisterPipelineRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainRegisterPipelineRequest(val *MainRegisterPipelineRequest) *NullableMainRegisterPipelineRequest {
	return &NullableMainRegisterPipelineRequest{value: val, isSet: true}
}

func (v NullableMainRegisterPipelineRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainRegisterPipelineRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


