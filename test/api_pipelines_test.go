/*
Observability Service API

Testing PipelinesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_PipelinesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PipelinesAPIService PipelinesFailedGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PipelinesAPI.PipelinesFailedGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelinesPipelineIdDurationGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pipelineId string

		resp, httpRes, err := apiClient.PipelinesAPI.PipelinesPipelineIdDurationGet(context.Background(), pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelinesPipelineIdEventsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pipelineId string

		resp, httpRes, err := apiClient.PipelinesAPI.PipelinesPipelineIdEventsGet(context.Background(), pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelinesPipelineIdStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pipelineId string

		resp, httpRes, err := apiClient.PipelinesAPI.PipelinesPipelineIdStatusGet(context.Background(), pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelinesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PipelinesAPI.PipelinesPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelinesSucceededGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PipelinesAPI.PipelinesSucceededGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelinesTotalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PipelinesAPI.PipelinesTotalGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelinesTypeAverageDurationGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.PipelinesAPI.PipelinesTypeAverageDurationGet(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelinesTypeMaxDurationGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.PipelinesAPI.PipelinesTypeMaxDurationGet(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
